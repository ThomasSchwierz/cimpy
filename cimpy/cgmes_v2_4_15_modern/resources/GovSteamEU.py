"""
Generated from the CGMES 3 files via cimgen: https://github.com/sogno-platform/cimgen
"""

from functools import cached_property
from typing import Optional
from pydantic import Field
from pydantic.dataclasses import dataclass
from ..utils.profile import BaseProfile, Profile

from .TurbineGovernorDynamics import TurbineGovernorDynamics

@dataclass
class GovSteamEU(TurbineGovernorDynamics):
    """
    Simplified model  of boiler and steam turbine with PID governor.

    mwbase: Base for power values (MWbase) (>0).  Unit = MW.
    tp: Power transducer time constant (Tp).  Typical Value = 0.07.
    ke: Gain of the power controller (Ke).  Typical Value = 0.65.
    tip: Integral time constant of the power controller (Tip).  Typical Value = 2.
    tdp: Derivative time constant of the power controller (Tdp).  Typical Value = 0.
    tfp: Time constant of the power controller (Tfp).  Typical Value = 0.
    tf: Frequency transducer time constant (Tf).  Typical Value = 0.
    kfcor: Gain of the frequency corrector (Kfcor).  Typical Value = 20.
    db1: Dead band of the frequency corrector (db1).  Typical Value = 0.
    wfmax: Upper limit for frequency correction (Wfmax).  Typical Value = 0.05.
    wfmin: Lower limit for frequency correction (Wfmin).  Typical Value = -0.05.
    pmax: Maximal active power of the turbine (Pmax).  Typical Value = 1.
    ten: Electro hydraulic transducer (Ten).  Typical Value = 0.1.
    tw: Speed transducer time constant (Tw).  Typical Value = 0.02.
    kwcor: Gain of the speed governor (Kwcor).  Typical Value = 20.
    db2: Dead band of the speed governor (db2).  Typical Value = 0.0004.
    wwmax: Upper limit for the speed governor (Wwmax).  Typical Value = 0.1.
    wwmin: Lower limit for the speed governor frequency correction (Wwmin).  Typical Value = -1.
    wmax1: Emergency speed control lower limit (wmax1).  Typical Value = 1.025.
    wmax2: Emergency speed control upper limit (wmax2).  Typical Value = 1.05.
    tvhp: Control valves servo time constant (Tvhp).  Typical Value = 0.1.
    cho: Control valves rate opening limit (Cho).  Unit = PU/sec.  Typical Value = 0.17.
    chc: Control valves rate closing limit (Chc).  Unit = PU/sec.  Typical Value = -3.3.
    hhpmax: Maximum control valve position (Hhpmax).  Typical Value = 1.
    tvip: Intercept valves servo time constant (Tvip).  Typical Value = 0.15.
    cio: Intercept valves rate opening limit (Cio).  Typical Value = 0.123.
    cic: Intercept valves rate closing limit (Cic).  Typical Value = -2.2.
    simx: Intercept valves transfer limit (Simx).  Typical Value = 0.425.
    thp: High pressure (HP) time constant of the turbine (Thp).  Typical Value = 0.31.
    trh: Reheater  time constant of the turbine (Trh).  Typical Value = 8.
    tlp: Low pressure(LP) time constant of the turbine (Tlp).  Typical Value = 0.45.
    prhmax: Maximum low pressure limit (Prhmax).  Typical Value = 1.4.
    khp: Fraction of total turbine output generated by HP part (Khp).  Typical Value = 0.277.
    klp: Fraction of total turbine output generated by HP part (Klp).  Typical Value = 0.723.
    tb: Boiler time constant (Tb).  Typical Value = 100.
    """

    mwbase : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    tp : int = Field(default=0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    ke : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    tip : int = Field(default=0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    tdp : int = Field(default=0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    tfp : int = Field(default=0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    tf : int = Field(default=0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    kfcor : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    db1 : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    wfmax : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    wfmin : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    pmax : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    ten : int = Field(default=0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    tw : int = Field(default=0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    kwcor : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    db2 : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    wwmax : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    wwmin : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    wmax1 : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    wmax2 : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    tvhp : int = Field(default=0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    cho : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    chc : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    hhpmax : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    tvip : int = Field(default=0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    cio : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    cic : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    simx : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    thp : int = Field(default=0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    trh : int = Field(default=0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    tlp : int = Field(default=0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    prhmax : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    khp : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    klp : float = Field(default=0.0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 

    tb : int = Field(default=0, json_schema_extra={"in_profiles":[Profile.DY, ]}) 



    @cached_property
    def possible_profiles(self)->set[BaseProfile]:
        """
        A resource can be used by multiple profiles. This is the set of profiles
        where this element can be found.
        """
        return { Profile.DY,  }
